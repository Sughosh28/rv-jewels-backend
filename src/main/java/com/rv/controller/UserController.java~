package com.rv.controller;

import com.rv.service.OrderService;
import com.rv.service.ProductService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ResponseStatusException;

import java.util.UUID;

@RestController
@RequestMapping("/api/v2/user")
public class UserController {
    private final OrderService orderService;

    public UserController(OrderService orderService) {
        this.orderService = orderService;
    }

    @PostMapping("/place-order")
    public ResponseEntity<?> createOrder(
            @RequestHeader("Authorization") String token,
            @RequestParam Long productId,
            @RequestParam(defaultValue = "1") int quantity) {

        if (token == null || token.isEmpty()) {
            throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "UNAUTHORIZED");
        }

        String authToken = token.substring(7);
        return ResponseEntity.ok(orderService.createOrder(authToken, productId, quantity));
    }

    @DeleteMapping("/cancel-order/{orderId}")
    public ResponseEntity<?> cancelOrder(@RequestHeader("Authorization") String token, @PathVariable UUID orderId) {
        if (token == null || token.isEmpty()) {
            throw new RuntimeException("Authentication is missing");
        }
        String authToken = token.substring(7);
        return new ResponseEntity<>(orderService.cancelOrder(authToken, orderId), HttpStatus.OK);

    }

    @GetMapping("/my-orders")
    public ResponseEntity<?> getMyOrders(@RequestHeader("Authorization") String token) {
        if (token == null || token.isEmpty()) {
            throw new RuntimeException("Authentication is missing");
        }

        String authToken = token.substring(7);
        return new ResponseEntity<>(orderService.getMyOrders(authToken), HttpStatus.OK);

    }

    
}
